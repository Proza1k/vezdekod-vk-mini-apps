{"version":3,"sources":["panels/Home.js","img/persik.png","panels/Persik.js","panels/Friends.js","App.js","index.js"],"names":["Home","id","go","fetchedUser","header","mode","before","photo_200","src","description","city","title","first_name","last_name","stretched","size","onClick","Persik","props","left","className","persik","alt","renderingFriendsList","friendsList","users","map","user","FriendsList","useState","friendsData","setFriendsData","setFriendsList","useEffect","getFriends","a","bridge","send","friends","activePanel","App","setActivePanel","setUser","popout","setPopout","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","Friends","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c760c02c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Panel, PanelHeader, Header, Button, Group, Cell, Div, Avatar } from '@vkontakte/vkui';\n\nconst Home = ({ id, go, fetchedUser }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader>Example</PanelHeader>\n\t\t{fetchedUser &&\n\t\t<Group header={<Header mode=\"secondary\">User Data Fetched with VK Bridge</Header>}>\n\t\t\t<Cell\n\t\t\t\tbefore={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n\t\t\t\tdescription={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}\n\t\t\t>\n\t\t\t\t{`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n\t\t\t</Cell>\n\t\t</Group>}\n\n\t\t<Group header={<Header mode=\"secondary\">Navigation Example</Header>}>\n\t\t\t<Div>\n\t\t\t\t<Button stretched size=\"l\" mode=\"secondary\" onClick={go} data-to=\"friends-list\">\n\t\t\t\t\tShow me the Friends, please\n\t\t\t\t</Button>\n\t\t\t</Div>\n\t\t</Group>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/persik.ae9f0072.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Panel, PanelHeader, PanelHeaderBack } from '@vkontakte/vkui';\n\nimport persik from '../img/persik.png';\nimport './Persik.css';\n\nconst Persik = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<PanelHeaderBack onClick={props.go} data-to=\"home\"/>}\n\t\t>\n\t\t\tPersik\n\t\t</PanelHeader>\n\t\t<img className=\"Persik\" src={persik} alt=\"Persik The Cat\"/>\n\t</Panel>\n);\n\nPersik.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Persik;\n","import { Group, Panel, SimpleCell, Avatar, IconButton, View, ScreenSpinner } from '@vkontakte/vkui'\nimport { Icon28RssFeedOutline } from '@vkontakte/icons';\nimport React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport bridge from '@vkontakte/vk-bridge';\n\nconst renderingFriendsList = (friendsList) => {\n    if (friendsList !== null) {\n        return (\n            <Group>\n                {friendsList.users.map(user => {\n                    <SimpleCell before={<Avatar size={48} src={user.photo_200} />} after={<IconButton><Icon28RssFeedOutline /></IconButton>} description=\"Команда ВКонтакте\">{user.first_name} {user.last_name}</SimpleCell>\n                })}\n            </Group>\n        )\n    } else {\n        return (\n            <ScreenSpinner />\n        )\n    }\n}\n\nconst FriendsList = () => {\n    const [friendsData, setFriendsData] = useState(null)\n    const [friendsList, setFriendsList] = useState(renderingFriendsList(friendsData))\n    useEffect(() => {\n        const getFriends = async () => {\n            const friends = await bridge.send(\"VKWebAppGetFriends\", {});\n            setFriendsData(friends)\n            setFriendsList(renderingFriendsList(friends))\n        }\n\n        getFriends()\n    }, [])\n\n    return (\n        <View activePanel=\"header\">\n            <Panel id=\"header\">Вибраника</Panel>\n            {friendsList}\n        </View>\n    )\n}\n\nFriendsList.propTypes = {\n    id: PropTypes.string.isRequired,\n    go: PropTypes.func.isRequired,\n};\n\nexport default FriendsList\n","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport { View, ScreenSpinner, AdaptivityProvider, AppRoot } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport Persik from './panels/Persik';\nimport FriendsList from './panels/Friends';\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<AdaptivityProvider>\n\t\t\t<AppRoot>\n\t\t\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n\t\t\t\t\t<FriendsList id=\"friends-list\" go={go} />\n\t\t\t\t\t<Persik id='persik' go={go} />\n\t\t\t\t</View>\n\t\t\t</AppRoot>\n\t\t</AdaptivityProvider>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}